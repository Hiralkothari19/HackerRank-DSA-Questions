import java.io.*;
import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class Pair {
    Node node;
    int hd;

    Pair(Node node, int hd) {
        this.node = node;
        this.hd = hd;
    }
}

public class Solution {

    // Function to print the top view of the binary tree
    public static void topView(Node root) {
        if (root == null) return;

        TreeMap<Integer, Integer> topViewMap = new TreeMap<>();
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root, 0));

        while (!queue.isEmpty()) {
            Pair pair = queue.poll();
            Node current = pair.node;
            int hd = pair.hd;

            if (!topViewMap.containsKey(hd)) {
                topViewMap.put(hd, current.data);
            }

            if (current.left != null) {
                queue.add(new Pair(current.left, hd - 1));
            }
            if (current.right != null) {
                queue.add(new Pair(current.right, hd + 1));
            }
        }

        for (int value : topViewMap.values()) {
            System.out.print(value + " ");
        }
    }

    // Function to insert a node in the binary tree
    public static Node insert(Node root, int data) {
        if (root == null) {
            return new Node(data);
        }
        if (data < root.data) {
            root.left = insert(root.left, data);
        } else {
            root.right = insert(root.right, data);
        }
        return root;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt(); // Number of nodes in the tree
        Node root = null;

        for (int i = 0; i < n; i++) {
            int data = scanner.nextInt();
            root = insert(root, data);
        }

        topView(root); // Print the top view of the tree
    }
}
